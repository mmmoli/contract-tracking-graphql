type Club {
   _id: Long!
   id: String!
   image: String
   name: String!
   in_league: League @relation(name: "IN_LEAGUE", direction: "OUT")
   transfers_from_club: [Transfer] @relation(name: "FROM_CLUB", direction: "IN")
   transfers_to_club: [Transfer] @relation(name: "TO_CLUB", direction: "IN")
}

type Transfer {
   _id: Long!
   date: Date!
   id: String!
   value: Float!
   of_player: [Player] @relation(name: "OF_PLAYER", direction: "OUT")
   from_club: [Club] @relation(name: "FROM_CLUB", direction: "OUT")
   to_club: [Club] @relation(name: "TO_CLUB", direction: "OUT")
}

type League {
   _id: Long!
   href: String
   id: String!
   name: String!
   in_country: Country @relation(name: "IN_COUNTRY", direction: "OUT")
   clubs: [Club] @relation(name: "IN_LEAGUE", direction: "IN")
}

type Country {
   _id: Long!
   name: String!
   leagues: [League] @relation(name: "IN_COUNTRY", direction: "IN")
}

type Player {
   _id: Long!
   id: String!
   image: String
   name: String!
   transfers: [Transfer] @relation(name: "OF_PLAYER", direction: "IN")
}


type SpendingByClub {
    club: String
    clubImage: String
    country: String
    countryImage: String
    moneySpent: Int
    moneyReceived: Int
    profit: Int
}

type SpendingByLeague {
    league: String
    leagueImage: String
    country: String
    countryImage: String
    moneySpent: Int
    moneyReceived: Int
    profit: Int
}

type MoneyFlow {
    fromCountry: String
    fromCountryImage: String
    toCountry: String
    toCountryImage: String
    totalFees: Int
    country1Country2: Int
    country2Country1: Int
}

type Query {
  spendingByClub(countrySubstring: String = ""): [SpendingByClub]
  @cypher(
    statement: """MATCH (club:Club)-[*2]->(country:Country)
                  WHERE country.name CONTAINS $countrySubstring
                  WITH club, country,
                       apoc.coll.sumLongs([(club)<-[:TO_CLUB]-(t) | t.value]) AS moneyOut,
                       apoc.coll.sumLongs([(club)<-[:FROM_CLUB]-(t) | t.value]) AS moneyIn
                  RETURN { club: club.name, clubImage: club.image, country: country.name, countryImage: country.image, moneySpent: moneyOut, moneyReceived: moneyIn, profit: moneyIn - moneyOut}"""
  )

    spendingByLeague(countrySubstring: String = ""): [SpendingByLeague]
    @cypher(
        statement: """MATCH (league:League)-[:IN_COUNTRY]->(country:Country)
        WHERE country.name CONTAINS $countrySubstring
        WITH country, league,
        apoc.coll.sumLongs([(league)<-[:IN_LEAGUE]-(club)<-[:TO_CLUB]-(t) | t.value]) AS moneyOut,
        apoc.coll.sumLongs([(league)<-[:IN_LEAGUE]-(club)<-[:FROM_CLUB]-(t) | t.value]) AS moneyIn
        RETURN { league: league.name, leagueImage: league.image, country: country.name, countryImage: country.image, moneySpent: moneyOut, moneyReceived: moneyIn, profit: moneyIn - moneyOut}"""
    )

    moneyFlow(countrySubstring: String = ""): [MoneyFlow]
    @cypher(
      statement: """CALL apoc.when(
                      $countrySubstring = '',
                      'MATCH (country1:Country), (country2:Country) WHERE id(country1) < id(country2) RETURN country1, country2',
                      'MATCH (country1:Country), (country2:Country) WHERE country1.name CONTAINS $countrySubstring AND country1 <> country2 RETURN country1, country2',
                      {countrySubstring: $countrySubstring})
                    YIELD value
                    WITH value.country1 AS country1, value.country2 AS country2

                    WITH country1, country2,
                           apoc.coll.sumLongs([(country1)<-[:IN_COUNTRY]-()<-[:IN_LEAGUE]-()<-[:FROM_CLUB]-(t)-[:TO_CLUB]->()-[:IN_LEAGUE]->()-[:IN_COUNTRY]->(country2) | t.value]) AS country2ToCountry1,
                           apoc.coll.sumLongs([(country2)<-[:IN_COUNTRY]-()<-[:IN_LEAGUE]-()<-[:FROM_CLUB]-(t)-[:TO_CLUB]->()-[:IN_LEAGUE]->()-[:IN_COUNTRY]->(country1) | t.value]) AS country1ToCountry2
                    WITH country1, country2, country1ToCountry2, country2ToCountry1, country1ToCountry2 + country2ToCountry1 AS totalFees
                    WHERE totalFees > 0
                    RETURN {
                        fromCountry: country1.name,
                        fromCountryImage: country1.image,
                        toCountry: country2.name,
                        toCountryImage: country2.image,
                        totalFees: totalFees,
                        country1Country2: country1ToCountry2,
                        country2Country1: country2ToCountry1
                    }
                    """
    )

}

