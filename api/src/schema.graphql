type Club {
   _id: Long!
   id: String!
   image: String
   name: String!
   in_league: [League] @relation(name: "IN_LEAGUE", direction: "OUT")
   transfers_from_club: [Transfer] @relation(name: "FROM_CLUB", direction: "IN")
   transfers_to_club: [Transfer] @relation(name: "TO_CLUB", direction: "IN")
}

type Transfer {
   _id: Long!
   date: Date!
   id: String!
   value: Float!
   of_player: [Player] @relation(name: "OF_PLAYER", direction: "OUT")
   from_club: [Club] @relation(name: "FROM_CLUB", direction: "OUT")
   to_club: [Club] @relation(name: "TO_CLUB", direction: "OUT")
}

type League {
   _id: Long!
   href: String
   id: String!
   name: String!
   in_country: [Country] @relation(name: "IN_COUNTRY", direction: "OUT")
   clubs: [Club] @relation(name: "IN_LEAGUE", direction: "IN")
}

type Country {
   _id: Long!
   name: String!
   leagues: [League] @relation(name: "IN_COUNTRY", direction: "IN")
}

type Player {
   _id: Long!
   id: String!
   image: String
   name: String!
   transfers: [Transfer] @relation(name: "OF_PLAYER", direction: "IN")
}


type Spending {
    club: String
    clubImage: String
    country: String
    countryImage: String
    moneySpent: Int
    moneyReceived: Int
    profit: Int
}

type MoneyFlow {
    fromCountry: String
    fromCountryImage: String
    toCountry: String
    toCountryImage: String
    totalFees: Int
    player: String
    playerImage: String
    fee: Int
    numberOfTransfers: Int
}

type Query {
  spendingByClub(countrySubstring: String = ""): [Spending]
  @cypher(
    statement: """MATCH (club:Club)-[*2]->(country:Country)
                  WHERE country.name CONTAINS $countrySubstring
                  WITH club, country,
                       apoc.coll.sumLongs([(club)<-[:TO_CLUB]-(t) | t.value]) AS moneyOut,
                       apoc.coll.sumLongs([(club)<-[:FROM_CLUB]-(t) | t.value]) AS moneyIn
                  RETURN { club: club.name, clubImage: club.image, country: country.name, countryImage: country.image, moneySpent: moneyOut, moneyReceived: moneyIn, profit: moneyIn - moneyOut}"""
  )

    moneyFlow(filter: _MoneyFlowFilter, orderBy: [_MoneyFlowOrdering]): [MoneyFlow]
    @cypher(
      statement: """MATCH (t:Transfer)-[:OF_PLAYER]->(player),
                          (fromCountry)<-[:IN_COUNTRY]-(fromLeague),
                          (fromLeague)<-[:IN_LEAGUE]-(from)<-[:FROM_CLUB]-(t),
                          (t)-[:TO_CLUB]->(to)-[:IN_LEAGUE]->(toLeague),
                          (toLeague)-[:IN_COUNTRY]->(toCountry)
                    WITH *
                    ORDER BY fromCountry, toCountry, t.value DESC
                    WITH sum(t.value) AS totalFees, fromCountry, toCountry, collect({player: player, fee: t.value}) AS transfers
                    WHERE fromCountry <> toCountry
                    RETURN {fromCountry: fromCountry.name,
                            fromCountryImage: fromCountry.image,
                            toCountry: toCountry.name,
                            toCountryImage: toCountry.image,
                            totalFees: toInteger(totalFees),
                            player: transfers[0].player.name,
                            playerImage: transfers[0].player.image,
                            fee: toInteger(transfers[0].fee),
                            numberOfTransfers: size(transfers)}"""
    )

}

